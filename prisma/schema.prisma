generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  name                String?
  avatar              String?
  role                UserRole           @default(USER)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  assessments         Assessment[]
  healthProfile       HealthProfile?
  payments            Payment[]
  professional        Professional?
  downloadedResources ResourceDownload[]
  sessionsAsClient    Session[]          @relation("ClientSessions")

  @@map("users")
}

model Professional {
  id           String                  @id @default(cuid())
  userId       String                  @unique
  type         ProfessionalType
  description  String?
  experience   Int?
  rating       Float?                  @default(0)
  hourlyRate   Float?
  verified     Boolean                 @default(false)
  verifiedAt   DateTime?
  availability Json?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  specialties  ProfessionalSpecialty[]
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions     Session[]

  @@map("professionals")
}

model HealthProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  diabetesType DiabetesType?
  diagnosedAt  DateTime?
  weight       Float?
  height       Float?
  age          Int?
  goals        String
  medications  String
  allergies    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_profiles")
}

model Resource {
  id           String             @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  fileUrl      String?
  thumbnailUrl String?
  price        Float?             @default(0)
  tags         String
  requiresAuth Boolean            @default(true)
  premiumOnly  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  downloads    ResourceDownload[]

  @@map("resources")
}

model ResourceDownload {
  id           String   @id @default(cuid())
  userId       String
  resourceId   String
  downloadedAt DateTime @default(now())
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("resource_downloads")
}

model Session {
  id             String        @id @default(cuid())
  clientId       String
  professionalId String
  title          String
  description    String?
  scheduledAt    DateTime
  duration       Int           @default(60)
  status         SessionStatus @default(SCHEDULED)
  price          Float
  meetingUrl     String?
  recordingUrl   String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  payment        Payment?
  client         User          @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  professional   Professional  @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Payment {
  id                 String        @id @default(cuid())
  userId             String
  sessionId          String?       @unique
  amount             Float
  currency           String        @default("EUR")
  status             PaymentStatus @default(PENDING)
  stripePaymentId    String?       @unique
  professionalAmount Float?
  platformAmount     Float?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  session            Session?      @relation(fields: [sessionId], references: [id])
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Assessment {
  id        String   @id @default(cuid())
  userId    String?
  responses Json
  results   Json
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model ProfessionalSpecialty {
  id             String       @id @default(cuid())
  professionalId String
  diabetesType   DiabetesType
  description    String?
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, diabetesType])
  @@map("professional_specialties")
}

model Newsletter {
  id          String           @id @default(cuid())
  email       String           @unique
  source      NewsletterSource @default(MAINTENANCE_PAGE)
  ipAddress   String?
  userAgent   String?
  isActive    Boolean          @default(true)
  isVerified  Boolean          @default(false)
  verifyToken String?          @unique
  spamScore   Float            @default(0)
  isBlocked   Boolean          @default(false)
  blockReason String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  verifiedAt  DateTime?
  interests   String[]

  @@map("newsletter_subscriptions")
}

enum UserRole {
  VISITOR
  USER
  PROFESSIONAL
  ADMIN
}

enum DiabetesType {
  TYPE_1
  TYPE_2
  GESTATIONAL
  PREDIABETES
  INFANTIL
}

enum ProfessionalType {
  DIETISTA
  NUTRICIONISTA
  EDUCADOR
  ENTRENADOR
  PSICOLOGO
  MEDICO
}

enum ResourceType {
  GUIA
  LIBRO
  MENU
  VIDEO
  AUDIO
  DOCUMENTO
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NewsletterSource {
  MAINTENANCE_PAGE
  LANDING_PAGE
  BLOG
  SOCIAL_MEDIA
  REFERRAL
}
