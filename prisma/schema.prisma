generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  name                String?
  avatar              String?
  role                UserRole           @default(USER)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  isVerified          Boolean            @default(false)
  password            String?
  verificationExpires DateTime?
  verificationToken   String?
  resetToken          String?
  resetTokenExpiry    DateTime?
  notifications       Notification[]
  assessments         Assessment[]
  healthProfile       HealthProfile?
  payments            Payment[]
  professional        Professional?
  downloadedResources ResourceDownload[]
  sessionsAsClient    Session[]          @relation("ClientSessions")

  @@map("users")
}

model Professional {
  id               String                        @id @default(cuid())
  userId           String                        @unique
  type             ProfessionalType
  description      String?
  experience       Int?
  rating           Float?                        @default(0)
  hourlyRate       Float?
  verified         Boolean                       @default(false)
  verifiedAt       DateTime?
  availability     Json?
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  sessionTemplates ProfessionalSessionTemplate[]
  specialties      ProfessionalSpecialty[]
  user             User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions         Session[]

  @@map("professionals")
}

model HealthProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  diabetesType DiabetesType?
  diagnosedAt  DateTime?
  weight       Float?
  height       Float?
  age          Int?
  goals        String
  medications  String
  allergies    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_profiles")
}

model Resource {
  id           String             @id @default(cuid())
  title        String
  description  String?
  type         ResourceType
  fileUrl      String?
  thumbnailUrl String?
  price        Float?             @default(0)
  tags         String
  requiresAuth Boolean            @default(true)
  premiumOnly  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  downloads    ResourceDownload[]

  @@map("resources")
}

model ResourceDownload {
  id           String   @id @default(cuid())
  userId       String
  resourceId   String
  downloadedAt DateTime @default(now())
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("resource_downloads")
}

model SessionTemplate {
  id             String                        @id @default(cuid())
  title          String
  description    String?
  basePrice      Float
  durationId     String
  specialtyId    String?
  category       SessionCategory               @default(CONSULTATION)
  modality       SessionModality               @default(ONLINE)
  requiresPrereq Boolean                       @default(false)
  prerequisiteId String?
  isActive       Boolean                       @default(true)
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt
  professionals  ProfessionalSessionTemplate[]
  duration       SessionDuration               @relation(fields: [durationId], references: [id])
  prerequisite   SessionTemplate?              @relation("SessionPrerequisites", fields: [prerequisiteId], references: [id])
  prerequisites  SessionTemplate[]             @relation("SessionPrerequisites")
  specialty      SessionSpecialty?             @relation(fields: [specialtyId], references: [id])
  sessions       Session[]

  @@map("session_templates")
}

model ProfessionalSessionTemplate {
  id                String          @id @default(cuid())
  professionalId    String
  sessionTemplateId String
  customPrice       Float?
  isEnabled         Boolean         @default(true)
  createdAt         DateTime        @default(now())
  professional      Professional    @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  sessionTemplate   SessionTemplate @relation(fields: [sessionTemplateId], references: [id], onDelete: Cascade)

  @@unique([professionalId, sessionTemplateId])
  @@map("professional_session_templates")
}

model SessionDuration {
  id        String            @id @default(cuid())
  name      String
  minutes   Int               @unique
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  templates SessionTemplate[]

  @@map("session_durations")
}

model SessionSpecialty {
  id          String            @id @default(cuid())
  name        String
  description String?
  color       String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  templates   SessionTemplate[]

  @@map("session_specialties")
}

model Session {
  id                String          @id @default(cuid())
  clientId          String
  professionalId    String
  sessionTemplateId String
  title             String
  description       String?
  scheduledAt       DateTime
  duration          Int
  status            SessionStatus   @default(SCHEDULED)
  finalPrice        Float
  meetingUrl        String?
  recordingUrl      String?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  notifications     Notification[]
  payment           Payment?
  client            User            @relation("ClientSessions", fields: [clientId], references: [id], onDelete: Cascade)
  professional      Professional    @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  sessionTemplate   SessionTemplate @relation(fields: [sessionTemplateId], references: [id])

  @@map("sessions")
}

model Payment {
  id                 String        @id @default(cuid())
  userId             String
  sessionId          String?       @unique
  amount             Float
  currency           String        @default("EUR")
  status             PaymentStatus @default(PENDING)
  stripePaymentId    String?       @unique
  professionalAmount Float?
  platformAmount     Float?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  session            Session?      @relation(fields: [sessionId], references: [id])
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Assessment {
  id        String   @id @default(cuid())
  userId    String?
  responses Json
  results   Json
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

model ProfessionalSpecialty {
  id             String       @id @default(cuid())
  professionalId String
  diabetesType   DiabetesType
  description    String?
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, diabetesType])
  @@map("professional_specialties")
}

model Newsletter {
  id          String    @id @default(cuid())
  email       String    @unique
  source      String?
  ipAddress   String?
  userAgent   String?
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  verifyToken String?   @unique
  spamScore   Float     @default(0.0)
  isBlocked   Boolean   @default(false)
  blockReason String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  verifiedAt  DateTime?
  interests   Json?
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  sessionId String?
  type      String
  title     String
  message   String
  status    String    @default("PENDING")
  sentAt    DateTime?
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  session   Session?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([type])
  @@index([status])
}

enum UserRole {
  VISITOR
  USER
  PROFESSIONAL
  ADMIN
}

enum DiabetesType {
  TYPE_1
  TYPE_2
  GESTATIONAL
  PREDIABETES
  INFANTIL
}

enum ProfessionalType {
  DIETISTA
  NUTRICIONISTA
  EDUCADOR
  ENTRENADOR
  PSICOLOGO
  MEDICO
}

enum ResourceType {
  GUIA
  LIBRO
  MENU
  VIDEO
  AUDIO
  DOCUMENTO
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SessionCategory {
  CONSULTATION
  INITIAL
  FOLLOW_UP
  EMERGENCY
  EDUCATION
  NUTRITION
  PSYCHOLOGY
  GROUP
}

enum SessionModality {
  ONLINE
  IN_PERSON
  HYBRID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NewsletterSource {
  MAINTENANCE_PAGE
  LANDING_PAGE
  BLOG
  SOCIAL_MEDIA
  REFERRAL
}
